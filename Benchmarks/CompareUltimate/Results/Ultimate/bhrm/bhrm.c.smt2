(set-option :produce-models true)
(set-option :produce-unsat-cores true)
(set-logic ALL)
(set-info :source |
    SMT script generated on 2018/11/19 by Ultimate. http://ultimate.informatik.uni-freiburg.de/
|)
(set-info :smt-lib-version 2.5)
(set-info :category "industrial")
(echo "Start declaration of constants")
(echo "Finished declaration of constants")
(echo "Start declaration of functions")
(echo "Finished declaration of functions")
(echo "Start declaration of global variables")
(echo "Finished declaration global variables")
(echo "Start declaration of local variables")
(declare-fun |c_rand_#res| () Int)
(declare-fun |c_rand_#res_primed| () Int)
(declare-fun c_rand_~x~1 () Int)
(declare-fun c_rand_~x~1_primed () Int)
(declare-fun |c_ULTIMATE.start_#t~ret1| () Int)
(declare-fun |c_ULTIMATE.start_#t~ret1_primed| () Int)
(declare-fun |c_main_#res| () Int)
(declare-fun |c_main_#res_primed| () Int)
(declare-fun |c_main_#t~ret0| () Int)
(declare-fun |c_main_#t~ret0_primed| () Int)
(declare-fun c_main_~i~2 () Int)
(declare-fun c_main_~i~2_primed () Int)
(declare-fun c_main_~n~2 () Int)
(declare-fun c_main_~n~2_primed () Int)
(declare-fun c_main_~a~2 () Int)
(declare-fun c_main_~a~2_primed () Int)
(declare-fun c_main_~b~2 () Int)
(declare-fun c_main_~b~2_primed () Int)
(echo "Finished declaration local variables")
(push 1)
(declare-fun |v_rand_#res_1_const_-705111313| () Int)
(declare-fun v_rand_~x~1_1_const_1906354175 () Int)
(assert (let ((|v_rand_#res_1| |v_rand_#res_1_const_-705111313|) (v_rand_~x~1_1 v_rand_~x~1_1_const_1906354175)) (= |v_rand_#res_1| (ite (and (not (= 0 (mod v_rand_~x~1_1 2))) (< v_rand_~x~1_1 0)) (+ (mod v_rand_~x~1_1 2) (- 2)) (mod v_rand_~x~1_1 2)))))
(check-sat)
(pop 1)
(push 1)
(assert true)
(check-sat)
(pop 1)
(push 1)
(assert true)
(check-sat)
(pop 1)
(push 1)
(assert true)
(check-sat)
(pop 1)
(push 1)
(assert true)
(check-sat)
(pop 1)
(push 1)
(assert true)
(check-sat)
(pop 1)
(push 1)
(declare-fun v_main_~b~2_1_const_-1318530808 () Int)
(declare-fun v_main_~n~2_1_const_-1307314404 () Int)
(declare-fun v_main_~i~2_1_const_-1311937407 () Int)
(declare-fun v_main_~a~2_1_const_-1319458679 () Int)
(assert (let ((v_main_~b~2_1 v_main_~b~2_1_const_-1318530808) (v_main_~n~2_1 v_main_~n~2_1_const_-1307314404) (v_main_~i~2_1 v_main_~i~2_1_const_-1311937407) (v_main_~a~2_1 v_main_~a~2_1_const_-1319458679)) (and (= v_main_~b~2_1 0) (= v_main_~n~2_1 5) (= v_main_~i~2_1 0) (= v_main_~a~2_1 0))))
(check-sat)
(pop 1)
(push 1)
(assert true)
(check-sat)
(pop 1)
(push 1)
(declare-fun v_main_~i~2_3_const_-1311937377 () Int)
(declare-fun v_main_~n~2_3_const_-1307314406 () Int)
(assert (let ((v_main_~i~2_3 v_main_~i~2_3_const_-1311937377) (v_main_~n~2_3 v_main_~n~2_3_const_-1307314406)) (not (< v_main_~i~2_3 v_main_~n~2_3))))
(check-sat)
(pop 1)
(push 1)
(declare-fun v_main_~i~2_4_const_-1311937378 () Int)
(declare-fun v_main_~n~2_4_const_-1307314407 () Int)
(assert (let ((v_main_~i~2_4 v_main_~i~2_4_const_-1311937378) (v_main_~n~2_4 v_main_~n~2_4_const_-1307314407)) (< v_main_~i~2_4 v_main_~n~2_4)))
(check-sat)
(pop 1)
(push 1)
(assert true)
(check-sat)
(pop 1)
(push 1)
(declare-fun |v_main_#t~ret0_2_const_-819946371| () Int)
(assert (let ((|v_main_#t~ret0_2| |v_main_#t~ret0_2_const_-819946371|)) (and (<= 0 (+ |v_main_#t~ret0_2| 2147483648)) (<= |v_main_#t~ret0_2| 2147483647))))
(check-sat)
(pop 1)
(push 1)
(declare-fun v_main_~b~2_3_const_-1318530810 () Int)
(declare-fun v_main_~b~2_4_const_-1318530811 () Int)
(declare-fun |v_main_#t~ret0_4_const_-819946373| () Int)
(declare-fun v_main_~a~2_3_const_-1319458681 () Int)
(declare-fun v_main_~a~2_4_const_-1319458682 () Int)
(assert (let ((v_main_~b~2_3 v_main_~b~2_3_const_-1318530810) (v_main_~b~2_4 v_main_~b~2_4_const_-1318530811) (|v_main_#t~ret0_4| |v_main_#t~ret0_4_const_-819946373|) (v_main_~a~2_3 v_main_~a~2_3_const_-1319458681) (v_main_~a~2_4 v_main_~a~2_4_const_-1319458682)) (and (not (= |v_main_#t~ret0_4| 0)) (= v_main_~b~2_3 (+ v_main_~b~2_4 2)) (= v_main_~a~2_3 (+ v_main_~a~2_4 1)))))
(check-sat)
(pop 1)
(push 1)
(declare-fun v_main_~a~2_5_const_-1319458683 () Int)
(declare-fun v_main_~a~2_6_const_-1319458684 () Int)
(declare-fun |v_main_#t~ret0_6_const_-819946375| () Int)
(declare-fun v_main_~b~2_5_const_-1318530812 () Int)
(declare-fun v_main_~b~2_6_const_-1318530813 () Int)
(assert (let ((v_main_~a~2_5 v_main_~a~2_5_const_-1319458683) (v_main_~a~2_6 v_main_~a~2_6_const_-1319458684) (|v_main_#t~ret0_6| |v_main_#t~ret0_6_const_-819946375|) (v_main_~b~2_5 v_main_~b~2_5_const_-1318530812) (v_main_~b~2_6 v_main_~b~2_6_const_-1318530813)) (and (= v_main_~a~2_5 (+ v_main_~a~2_6 2)) (= |v_main_#t~ret0_6| 0) (= v_main_~b~2_5 (+ v_main_~b~2_6 1)))))
(check-sat)
(pop 1)
(push 1)
(declare-fun v_main_~i~2_5_const_-1311937379 () Int)
(declare-fun v_main_~i~2_6_const_-1311937380 () Int)
(assert (let ((v_main_~i~2_5 v_main_~i~2_5_const_-1311937379) (v_main_~i~2_6 v_main_~i~2_6_const_-1311937380)) (= v_main_~i~2_5 (+ v_main_~i~2_6 1))))
(check-sat)
(pop 1)
(push 1)
(assert false)
(check-sat)
(pop 1)
(push 1)
(declare-fun v_main_~a~2_7_const_-1319458685 () Int)
(declare-fun v_main_~b~2_7_const_-1318530814 () Int)
(declare-fun v_main_~n~2_5_const_-1307314408 () Int)
(assert (let ((v_main_~a~2_7 v_main_~a~2_7_const_-1319458685) (v_main_~b~2_7 v_main_~b~2_7_const_-1318530814) (v_main_~n~2_5 v_main_~n~2_5_const_-1307314408)) (not (= (+ v_main_~a~2_7 v_main_~b~2_7) (* 3 v_main_~n~2_5)))))
(check-sat)
(pop 1)
(push 1)
(declare-fun v_main_~a~2_8_const_-1319458686 () Int)
(declare-fun v_main_~b~2_8_const_-1318530815 () Int)
(declare-fun v_main_~n~2_6_const_-1307314409 () Int)
(declare-fun |v_main_#res_1_const_385270467| () Int)
(assert (let ((v_main_~a~2_8 v_main_~a~2_8_const_-1319458686) (v_main_~b~2_8 v_main_~b~2_8_const_-1318530815) (v_main_~n~2_6 v_main_~n~2_6_const_-1307314409) (|v_main_#res_1| |v_main_#res_1_const_385270467|)) (and (= (+ v_main_~a~2_8 v_main_~b~2_8) (* 3 v_main_~n~2_6)) (= |v_main_#res_1| 0))))
(check-sat)
(pop 1)
(push 1)
(assert true)
(check-sat)
(pop 1)
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~i~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (<= main_~i~2 0) (<= 5 main_~n~2))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= main_~i~2 0) (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= 5 main_~n~2))
(push 1)
(assert (not (<= main_~i~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~i~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (<= main_~i~2 0))
(push 1)
(assert (not (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 5 main_~n~2))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= c_main_~i~2_primed 0) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~i~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (<= main_~i~2 0) (<= 5 main_~n~2))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= main_~i~2 0) (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= 5 main_~n~2))
(push 1)
(assert (not (<= main_~i~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~i~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (<= main_~i~2 0))
(push 1)
(assert (not (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 5 main_~n~2))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)))
(assert (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~n~2 () Int)
(declare-fun main_~i~2 () Int)
(push 1)
(assert (not (and (<= 5 main_~n~2) (<= main_~i~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= 5 main_~n~2) (<= main_~i~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= main_~i~2 1))
(push 1)
(assert (not (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 5 main_~n~2))
(check-sat)
(pop 1)
(pop 1)
(assert (<= 5 main_~n~2))
(push 1)
(assert (not (<= main_~i~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~i~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_primed) (<= c_main_~i~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= c_main_~i~2_Hier 0) (<= 5 c_main_~n~2_Hier)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= c_main_~i~2_primed 0) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)) :named precondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2_Hier 0) (<= 5 c_main_~n~2_Hier))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)) :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~i~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (<= main_~i~2 0) (<= 5 main_~n~2))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= main_~i~2 0) (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= 5 main_~n~2))
(push 1)
(assert (not (<= main_~i~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~i~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (<= main_~i~2 0))
(push 1)
(assert (not (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 5 main_~n~2))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)))
(assert (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~n~2 () Int)
(declare-fun main_~i~2 () Int)
(push 1)
(assert (not (and (<= 5 main_~n~2) (<= main_~i~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= 5 main_~n~2) (<= main_~i~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= main_~i~2 1))
(push 1)
(assert (not (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 5 main_~n~2))
(check-sat)
(pop 1)
(pop 1)
(assert (<= 5 main_~n~2))
(push 1)
(assert (not (<= main_~i~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~i~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)))
(assert (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~n~2 () Int)
(declare-fun main_~i~2 () Int)
(push 1)
(assert (not (and (<= 5 main_~n~2) (<= main_~i~2 2))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= 5 main_~n~2) (<= main_~i~2 2)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= main_~i~2 2))
(push 1)
(assert (not (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 5 main_~n~2))
(check-sat)
(pop 1)
(pop 1)
(assert (<= 5 main_~n~2))
(push 1)
(assert (not (<= main_~i~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~i~2 2))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_primed) (<= c_main_~i~2_primed 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_primed) (<= c_main_~i~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= c_main_~i~2_Hier 0) (<= 5 c_main_~n~2_Hier)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= c_main_~i~2_primed 0) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)) :named precondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= c_main_~i~2_Hier 0) (<= 5 c_main_~n~2_Hier))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)) :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)) :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 2)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)) :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2_primed 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~i~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (<= main_~i~2 0) (<= 5 main_~n~2))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= main_~i~2 0) (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= 5 main_~n~2))
(push 1)
(assert (not (<= main_~i~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~i~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (<= main_~i~2 0))
(push 1)
(assert (not (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 5 main_~n~2))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)))
(assert (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~n~2 () Int)
(declare-fun main_~i~2 () Int)
(push 1)
(assert (not (and (<= 5 main_~n~2) (<= main_~i~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= 5 main_~n~2) (<= main_~i~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= main_~i~2 1))
(push 1)
(assert (not (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 5 main_~n~2))
(check-sat)
(pop 1)
(pop 1)
(assert (<= 5 main_~n~2))
(push 1)
(assert (not (<= main_~i~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~i~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)))
(assert (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~n~2 () Int)
(declare-fun main_~i~2 () Int)
(push 1)
(assert (not (and (<= 5 main_~n~2) (<= main_~i~2 2))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= 5 main_~n~2) (<= main_~i~2 2)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= main_~i~2 2))
(push 1)
(assert (not (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 5 main_~n~2))
(check-sat)
(pop 1)
(pop 1)
(assert (<= 5 main_~n~2))
(push 1)
(assert (not (<= main_~i~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~i~2 2))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2)))
(assert (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)))
(assert (not (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)))
(assert (not (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)))
(assert (not (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~i~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (<= main_~i~2 3) (<= 5 main_~n~2))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= main_~i~2 3) (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= 5 main_~n~2))
(push 1)
(assert (not (<= main_~i~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~i~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (<= main_~i~2 3))
(push 1)
(assert (not (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 5 main_~n~2))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_primed) (<= c_main_~i~2_primed 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_primed) (<= c_main_~i~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= c_main_~i~2_Hier 0) (<= 5 c_main_~n~2_Hier)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2_Hier 3) (<= 5 c_main_~n~2_Hier))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= c_main_~i~2_primed 0) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)) :named precondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2_Hier 0) (<= 5 c_main_~n~2_Hier))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= c_main_~i~2_Hier 3) (<= 5 c_main_~n~2_Hier))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)) :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)) :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 2)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= c_main_~i~2_Hier 3) (<= 5 c_main_~n~2_Hier))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)) :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2_primed 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2)) :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= c_main_~i~2_Hier 3) (<= 5 c_main_~n~2_Hier)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2)) :named precondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2_primed 3) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~i~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (<= main_~i~2 0) (<= 5 main_~n~2))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= main_~i~2 0) (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= 5 main_~n~2))
(push 1)
(assert (not (<= main_~i~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~i~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (<= main_~i~2 0))
(push 1)
(assert (not (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 5 main_~n~2))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)))
(assert (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~n~2 () Int)
(declare-fun main_~i~2 () Int)
(push 1)
(assert (not (and (<= 5 main_~n~2) (<= main_~i~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= 5 main_~n~2) (<= main_~i~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= main_~i~2 1))
(push 1)
(assert (not (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 5 main_~n~2))
(check-sat)
(pop 1)
(pop 1)
(assert (<= 5 main_~n~2))
(push 1)
(assert (not (<= main_~i~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~i~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)))
(assert (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~n~2 () Int)
(declare-fun main_~i~2 () Int)
(push 1)
(assert (not (and (<= 5 main_~n~2) (<= main_~i~2 2))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= 5 main_~n~2) (<= main_~i~2 2)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= main_~i~2 2))
(push 1)
(assert (not (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 5 main_~n~2))
(check-sat)
(pop 1)
(pop 1)
(assert (<= 5 main_~n~2))
(push 1)
(assert (not (<= main_~i~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~i~2 2))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2)))
(assert (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)))
(assert (not (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)))
(assert (not (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)))
(assert (not (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~i~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (<= main_~i~2 3) (<= 5 main_~n~2))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= main_~i~2 3) (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= 5 main_~n~2))
(push 1)
(assert (not (<= main_~i~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~i~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (<= main_~i~2 3))
(push 1)
(assert (not (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 5 main_~n~2))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 4)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 4))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 4)))
(assert (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 4))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 4)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 4))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 4)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 4))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~n~2) (<= c_main_~i~2 4)))
(assert (not (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2)))
(assert (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 4))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~n~2 () Int)
(declare-fun main_~i~2 () Int)
(push 1)
(assert (not (and (<= 5 main_~n~2) (<= main_~i~2 4))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= 5 main_~n~2) (<= main_~i~2 4)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= main_~i~2 4))
(push 1)
(assert (not (<= 5 main_~n~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 5 main_~n~2))
(check-sat)
(pop 1)
(pop 1)
(assert (<= 5 main_~n~2))
(push 1)
(assert (not (<= main_~i~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~i~2 4))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_primed) (<= c_main_~i~2_primed 4))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= c_main_~i~2_primed 3) (<= 5 c_main_~n~2_primed))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_primed) (<= c_main_~i~2_primed 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_primed) (<= c_main_~i~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= c_main_~i~2_Hier 0) (<= 5 c_main_~n~2_Hier)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 4))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= c_main_~i~2_primed 0) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)) :named precondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2_Hier 0) (<= 5 c_main_~n~2_Hier))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 4))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1)) :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)) :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 2)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2_Hier 0) (<= 5 c_main_~n~2_Hier))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 4))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2)) :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2_primed 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2)) :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= c_main_~i~2_Hier 3) (<= 5 c_main_~n~2_Hier)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2_Hier 0) (<= 5 c_main_~n~2_Hier))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 4))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2)) :named precondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2_primed 3) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= 5 c_main_~n~2) (<= c_main_~i~2 4)) :named precondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2 3) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= 5 c_main_~n~2_Hier) (<= c_main_~i~2_Hier 4)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2_Hier 0) (<= 5 c_main_~n~2_Hier))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= c_main_~i~2_Hier 3) (<= 5 c_main_~n~2_Hier))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= 5 c_main_~n~2) (<= c_main_~i~2 4)) :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2_primed 4))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 4))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 4))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= c_main_~i~2 0) (<= 5 c_main_~n~2))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 5 c_main_~n~2) (<= c_main_~i~2 4))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~a~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~a~2 1))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 6) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 6) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~b~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 4) (= main_~n~2 5) (= main_~b~2 8))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 4) (= main_~n~2 5) (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~b~2 8))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 4))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 8))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 5) (= main_~b~2 10) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 5) (= main_~b~2 10) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 10))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 10)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 10))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(assert (= main_~b~2 10))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2_primed 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 10) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 10) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 10) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 10) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 10) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 10) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 10) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 10) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~a~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~a~2 1))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 6) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 6) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~b~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 4) (= main_~n~2 5) (= main_~b~2 8))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 4) (= main_~n~2 5) (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~b~2 8))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 4))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 8))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 9) (= main_~a~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 9) (= main_~a~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 9)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 9))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 9))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 9))
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2_primed 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 4) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 4) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~a~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~a~2 1))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 6) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 6) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 5) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 5) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 9) (= main_~a~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 9) (= main_~a~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 9)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 9))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 9))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 9))
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2_primed 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~a~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~a~2 1))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 6) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 6) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 5) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 5) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~b~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~b~2 8))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 8))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2_primed 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~a~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~a~2 1))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 5) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 5) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 9) (= main_~a~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 9) (= main_~a~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 9)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 9))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 9))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 9))
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2_primed 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~a~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~a~2 1))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 5) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 5) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~b~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~b~2 8))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 8))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2_primed 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~a~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~a~2 1))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~b~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~b~2 8))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 8))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2_primed 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~a~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~a~2 1))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 8))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2_primed 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~a~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~a~2 1))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 5) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 5) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 9) (= main_~a~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 9) (= main_~a~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 9)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 9))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 9))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 9))
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2_primed 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~a~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~a~2 1))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 5) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 5) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~b~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~b~2 8))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 8))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2_primed 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~a~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~a~2 1))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~b~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~b~2 8))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 8))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2_primed 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~a~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~a~2 1))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 8))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2_primed 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~a~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~a~2 1))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~b~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~b~2 8))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 8))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2_primed 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~a~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~a~2 1))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 8))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2_primed 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~a~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~a~2 1))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 8))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2_primed 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~a~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~n~2 5) (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~a~2 1))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 1))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 6) (= main_~a~2 9) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 6) (= main_~a~2 9) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 9))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 9)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 9))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(assert (= main_~a~2 9))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2_primed 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~n~2 5) (= c_main_~a~2 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~n~2_Hier 5) (= c_main_~a~2_Hier 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~n~2 5) (= c_main_~a~2_primed 1))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 1))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 5) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 5) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 9) (= main_~a~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 9) (= main_~a~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 9)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 9))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 9))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 9))
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 9) (= c_main_~a~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 9) (= c_main_~a~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 9) (= c_main_~a~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 1))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 5) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 5) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 5))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~b~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~b~2 8))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 8))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 5) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 5) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 5) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 1))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~b~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~b~2 8))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 8))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 1))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 8))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 1))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~b~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~b~2 8))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 8))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 1))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 8))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 1))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 8))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 1))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 3) (= main_~a~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 3))
(assert (= main_~a~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 6) (= main_~a~2 9) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 6) (= main_~a~2 9) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 9))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 9)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 9))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(assert (= main_~a~2 9))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 3) (= c_main_~a~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 3) (= c_main_~a~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 3) (= c_main_~a~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 1))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(declare-fun main_~b~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 7) (= main_~n~2 5) (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~b~2 8))
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 7))
(assert (= main_~n~2 5))
(push 1)
(assert (not (= main_~b~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 8))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5) (= c_main_~b~2_Hier 8)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 7) (= c_main_~n~2 5) (= c_main_~b~2 8)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 7) (= c_main_~n~2 5) (= c_main_~b~2_primed 8))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 1))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 6) (= main_~b~2 6) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 8))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 6) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 6) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 1))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 8))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 1))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 5) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 5))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 6) (= main_~a~2 9) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 6) (= main_~a~2 9) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 9))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 9)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 9))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(assert (= main_~a~2 9))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 5) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 5) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 1))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 6) (= main_~b~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 6) (= main_~b~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 8) (= main_~b~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~a~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 8))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(push 1)
(assert (not (= main_~b~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 8))
(assert (= main_~b~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 8) (= c_main_~b~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 8) (= c_main_~b~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 8) (= c_main_~b~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 1))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 6) (= main_~b~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 6) (= main_~b~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 7) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 7) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 7)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 7))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 7))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 6) (= main_~a~2 9) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 6) (= main_~a~2 9) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 9))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 9)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 9))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(assert (= main_~a~2 9))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 7) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 7) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 1))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 6) (= main_~b~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 6) (= main_~b~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 8) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 8) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 8))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 8))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 8))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 6) (= main_~a~2 9) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 6) (= main_~a~2 9) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 9))
(push 1)
(assert (not (= main_~b~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(push 1)
(assert (not (= main_~a~2 9)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 9))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 6))
(assert (= main_~a~2 9))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 8) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 8) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 8) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 8) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 8) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 6) (= c_main_~a~2_Hier 9) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 8) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 6) (= c_main_~a~2 9) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 6) (= c_main_~a~2_primed 9) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 0) (= main_~a~2 0) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~b~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(push 1)
(assert (not (= main_~a~2 0)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 0))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 0))
(assert (= main_~a~2 0))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 1) (= main_~a~2 2) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~b~2 1)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 1))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(push 1)
(assert (not (= main_~a~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 1))
(assert (= main_~a~2 2))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 2) (= main_~a~2 4) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 2) (= main_~a~2 4) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~b~2 2)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 2))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(push 1)
(assert (not (= main_~a~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 2))
(assert (= main_~a~2 4))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~a~2 () Int)
(declare-fun main_~b~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~a~2 6) (= main_~b~2 3) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~a~2 6) (= main_~b~2 3) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~a~2 6)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 6))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(push 1)
(assert (not (= main_~b~2 3)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 3))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~a~2 6))
(assert (= main_~b~2 3))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 4) (= main_~a~2 8) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 4) (= main_~a~2 8) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 8))
(push 1)
(assert (not (= main_~b~2 4)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 4))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(push 1)
(assert (not (= main_~a~2 8)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 8))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 4))
(assert (= main_~a~2 8))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)))
(assert (not (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~b~2 () Int)
(declare-fun main_~a~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (= main_~b~2 5) (= main_~a~2 10) (= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (= main_~b~2 5) (= main_~a~2 10) (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (= main_~n~2 5))
(push 1)
(assert (= main_~a~2 10))
(push 1)
(assert (not (= main_~b~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~b~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(push 1)
(assert (not (= main_~a~2 10)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~a~2 10))
(check-sat)
(pop 1)
(pop 1)
(assert (= main_~b~2 5))
(assert (= main_~a~2 10))
(push 1)
(assert (not (= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 10) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 10) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 8) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 10) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 8) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 10) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 8) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 10) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 8) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 8) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 10) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~a~2_Hier () Int)
(declare-fun c_main_~b~2_Hier () Int)
(assert (! (and (= c_main_~b~2_Hier 5) (= c_main_~a~2_Hier 10) (= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (= c_main_~a~2_Hier 6) (= c_main_~b~2_Hier 3) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 2) (= c_main_~a~2_Hier 4) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 1) (= c_main_~a~2_Hier 2) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 4) (= c_main_~a~2_Hier 8) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_Hier 0) (= c_main_~a~2_Hier 0) (= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (not (= |c_main_#t~ret0| 0)) (= c_main_~b~2_primed (+ c_main_~b~2 2)) (= c_main_~a~2_primed (+ c_main_~a~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~a~2_primed (+ c_main_~a~2 2)) (= |c_main_#t~ret0| 0) (= c_main_~b~2_primed (+ c_main_~b~2 1))) :named codeBlock))
(push 1)
(assert (! (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~a~2_primed 6) (= c_main_~b~2_primed 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 2) (= c_main_~a~2_primed 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 1) (= c_main_~a~2_primed 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 5) (= c_main_~a~2_primed 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 4) (= c_main_~a~2_primed 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2_primed 0) (= c_main_~a~2_primed 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (< c_main_~i~2 c_main_~n~2)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (not (= (+ c_main_~a~2 c_main_~b~2) (* 3 c_main_~n~2))) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (= c_main_~a~2 6) (= c_main_~b~2 3) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 2) (= c_main_~a~2 4) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 1) (= c_main_~a~2 2) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 5) (= c_main_~a~2 10) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 4) (= c_main_~a~2 8) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (= c_main_~b~2 0) (= c_main_~a~2 0) (= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~n~2 5) (<= 0 c_main_~i~2)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= c_main_~n~2 5) (<= 0 c_main_~i~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~n~2 () Int)
(declare-fun main_~i~2 () Int)
(push 1)
(assert (not (and (<= main_~n~2 5) (<= 0 main_~i~2))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= main_~n~2 5) (<= 0 main_~i~2)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= 0 main_~i~2))
(push 1)
(assert (not (<= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(assert (<= main_~n~2 5))
(push 1)
(assert (not (<= 0 main_~i~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 0 main_~i~2))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= 1 c_main_~i~2) (<= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= 1 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 1 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= c_main_~n~2 5) (<= 0 c_main_~i~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~n~2 5) (<= 0 c_main_~i~2)))
(assert (not (and (<= 1 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~i~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (<= 1 main_~i~2) (<= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= 1 main_~i~2) (<= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= main_~n~2 5))
(push 1)
(assert (not (<= 1 main_~i~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 1 main_~i~2))
(check-sat)
(pop 1)
(pop 1)
(assert (<= 1 main_~i~2))
(push 1)
(assert (not (<= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= 2 c_main_~i~2) (<= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= 2 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 2 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= c_main_~n~2 5) (<= 0 c_main_~i~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~n~2 5) (<= 0 c_main_~i~2)))
(assert (not (and (<= 2 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 2 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 1 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 1 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 2 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~i~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (<= 2 main_~i~2) (<= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= 2 main_~i~2) (<= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= main_~n~2 5))
(push 1)
(assert (not (<= 2 main_~i~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 2 main_~i~2))
(check-sat)
(pop 1)
(pop 1)
(assert (<= 2 main_~i~2))
(push 1)
(assert (not (<= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= c_main_~n~2 5) (<= 0 c_main_~i~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~n~2 5) (<= 0 c_main_~i~2)))
(assert (not (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 1 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 1 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 2 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 2 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~i~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (<= 3 main_~i~2) (<= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= 3 main_~i~2) (<= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= main_~n~2 5))
(push 1)
(assert (not (<= 3 main_~i~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 3 main_~i~2))
(check-sat)
(pop 1)
(pop 1)
(assert (<= 3 main_~i~2))
(push 1)
(assert (not (<= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= c_main_~n~2 5) (<= 0 c_main_~i~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~n~2 5) (<= 0 c_main_~i~2)))
(assert (not (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 1 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 1 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 2 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 2 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~i~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (<= 4 main_~i~2) (<= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= 4 main_~i~2) (<= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= main_~n~2 5))
(push 1)
(assert (not (<= 4 main_~i~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 4 main_~i~2))
(check-sat)
(pop 1)
(pop 1)
(assert (<= 4 main_~i~2))
(push 1)
(assert (not (<= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "begin unification")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~i~2) (<= c_main_~n~2 5)))
(assert true)
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert true)
(assert (not (and (<= 5 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= c_main_~n~2 5) (<= 0 c_main_~i~2))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= c_main_~n~2 5) (<= 0 c_main_~i~2)))
(assert (not (and (<= 5 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 1 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 1 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 5 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 2 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 2 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 5 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 5 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 5 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "Start implication check")
(push 1)
(assert (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5)))
(assert (not (and (<= 5 c_main_~i~2) (<= c_main_~n~2 5))))
(check-sat)
(pop 1)
(echo "Finished implication check")
(echo "end unification")
(echo "Begin Simplifier")
(push 1)
(declare-fun main_~i~2 () Int)
(declare-fun main_~n~2 () Int)
(push 1)
(assert (not (and (<= 5 main_~i~2) (<= main_~n~2 5))))
(check-sat)
(pop 1)
(push 1)
(assert (and (<= 5 main_~i~2) (<= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(push 1)
(assert (<= main_~n~2 5))
(push 1)
(assert (not (<= 5 main_~i~2)))
(check-sat)
(pop 1)
(push 1)
(assert (<= 5 main_~i~2))
(check-sat)
(pop 1)
(pop 1)
(assert (<= 5 main_~i~2))
(push 1)
(assert (not (<= main_~n~2 5)))
(check-sat)
(pop 1)
(push 1)
(assert (<= main_~n~2 5))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "End Simplifier")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (and (= c_main_~b~2_primed 0) (= c_main_~n~2_primed 5) (= c_main_~i~2_primed 0) (= c_main_~a~2_primed 0)) :named codeBlock))
(push 1)
(assert (! true :named precondition))
(push 1)
(assert (! (not (and (<= 4 c_main_~i~2_primed) (<= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 3 c_main_~i~2_primed) (<= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 2 c_main_~i~2_primed) (<= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 1 c_main_~i~2_primed) (<= c_main_~n~2_primed 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~n~2 5) (<= 0 c_main_~i~2)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 2 c_main_~i~2) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 1 c_main_~i~2) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= c_main_~n~2_Hier 5) (<= 0 c_main_~i~2_Hier)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= 4 c_main_~i~2_Hier) (<= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 3 c_main_~i~2_Hier) (<= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 2 c_main_~i~2_Hier) (<= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 1 c_main_~i~2_Hier) (<= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= c_main_~n~2 5) (<= 0 c_main_~i~2)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= c_main_~n~2 5) (<= 0 c_main_~i~2_primed))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 4 c_main_~i~2_primed) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 3 c_main_~i~2_primed) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 2 c_main_~i~2_primed) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= 1 c_main_~i~2) (<= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 2 c_main_~i~2) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= 1 c_main_~i~2_Hier) (<= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= 4 c_main_~i~2_Hier) (<= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 3 c_main_~i~2_Hier) (<= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 2 c_main_~i~2_Hier) (<= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= 1 c_main_~i~2) (<= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 4 c_main_~i~2_primed) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 3 c_main_~i~2_primed) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= 2 c_main_~i~2) (<= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= 2 c_main_~i~2_Hier) (<= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= 4 c_main_~i~2_Hier) (<= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 3 c_main_~i~2_Hier) (<= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= 2 c_main_~i~2) (<= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 4 c_main_~i~2_primed) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= 3 c_main_~i~2_Hier) (<= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= 4 c_main_~i~2_Hier) (<= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= 3 c_main_~i~2) (<= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 5 c_main_~i~2_primed) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (< c_main_~i~2 c_main_~n~2) :named codeBlock))
(push 1)
(assert (! (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(push 1)
(assert (! (not (and (<= 5 c_main_~i~2) (<= c_main_~n~2 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= |c_main_#t~ret0_primed| |c_rand_#res|) :named codeBlock))
(assert (! true :named modifiableVarEquality))
(assert (! true :named localVarsAssignment))
(push 1)
(assert (! true :named precondition))
(push 1)
(declare-fun c_main_~n~2_Hier () Int)
(declare-fun c_main_~i~2_Hier () Int)
(assert (! (and (<= 4 c_main_~i~2_Hier) (<= c_main_~n~2_Hier 5)) :named hierarchicalPrecondition))
(push 1)
(assert (! (not (and (<= 5 c_main_~i~2_Hier) (<= c_main_~n~2_Hier 5))) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(echo "starting to check validity of Hoare triples")
(push 1)
(assert (! (= c_main_~i~2_primed (+ c_main_~i~2 1)) :named codeBlock))
(push 1)
(assert (! (and (<= 4 c_main_~i~2) (<= c_main_~n~2 5)) :named precondition))
(push 1)
(assert (! (not false) :named negatedPostcondition))
(check-sat)
(pop 1)
(pop 1)
(pop 1)
(echo "finished to check validity of Hoare triples")
(exit)
